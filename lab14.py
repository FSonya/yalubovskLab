# Завдання 1: Основні операції з логічними значеннями
def перевірка_істинності(a, b, c):
    # Повертає результат виразу (a and b) або c
    return (a and b) or c

# Завдання 2: Логічна еквівалентність
def логічна_еквівалентність(a, b):
    # Повертає True, якщо a дорівнює b
    return a == b

# Завдання 3: Виключне або (XOR)
def xor(a, b):
    # Повертає True, якщо рівно один з аргументів True
    return a != b

# Завдання 4: Умовне вітання
def привітання(condition):
    # Повертає привітання на основі умови
    return "Привіт, світе!" if condition else "До побачення, світе!"

# Завдання 5: Вкладені умови
def вкладені_умови(x, y, z):
    # Повертає "Всі однакові", якщо всі три числа рівні
    if x == y == z:
        return "Всі однакові"
    # Повертає "Всі різні", якщо всі числа різні
    elif x != y and x != z and y != z:
        return "Всі різні"
    # Повертає "Жоден з вищезазначених" в інших випадках
    else:
        return "Жоден з вищезазначених"

# Завдання 6: Лічильник True
def лічильник_true(bool_list):
    # Повертає кількість значень True у списку
    return bool_list.count(True)

# Завдання 7: Парність бінарного представлення
def парність(n):
    # Підраховує кількість одиниць у бінарному представленні
    binary_representation = bin(n)[2:]  # Перетворюємо число в бінарний вигляд
    count_ones = binary_representation.count('1')
    # Повертає True, якщо кількість одиниць парна
    return count_ones % 2 == 0

# Завдання 8: Голосування більшості
def більшість(a, b, c):
    # Перевіряє, чи більше половини значень True
    return sum([a, b, c]) > 1

# Завдання 9: Перемикач логічного значення
def перемикач(value):
    # Повертає протилежне значення
    return not value

# Завдання 10: Імітація тернарного оператора
def тернарний_перевірка(condition, true_value, false_value):
    # Повертає true_value, якщо умова виконується, і false_value, якщо ні
    return true_value if condition else false_value

# Завдання 11: Перевірка комбінації
def перевірка(x, y, z):
    # Повертає True, якщо x True або y і z True
    return x or (y and z)

# Завдання 12: Ланцюжок умов
def ланцюжок_умов(a, b, c):
    # Повертає "Зростаючий", якщо числа у строгому порядку зростання
    if a < b < c:
        return "Зростаючий"
    # Повертає "Спадаючий", якщо числа у строгому порядку спадання
    elif a > b > c:
        return "Спадаючий"
    # Повертає "Жоден з вищезазначених" в інших випадках
    else:
        return "Жоден з вищезазначених"

# Завдання 13: Фільтрація True значень
def фільтрація_true(bool_list):
    # Повертає новий список з тільки True значень
    return [value for value in bool_list if value]

# Завдання 14: Умовний мультиплексор
def мультиплексор(a, b, c, n):
    # Повертає подвоєне значення n, якщо a True
    if a:
        return n * 2
    # Повертає потроєне значення n, якщо b True
    elif b:
        return n * 3
    # Повертає n - 5, якщо c True
    elif c:
        return n - 5
    # Повертає n без змін, якщо жоден з перших трьох не True
    else:
        return n

# Приклади використання функцій

print(перевірка_істинності(True, False, True))
print(логічна_еквівалентність(True, True))
print(xor(True, False))
print(привітання(True))
print(вкладені_умови(3, 3, 3))
print(лічильник_true([True, False, True, False, True]))
print(парність(3))
print(більшість(True, True, False))
print(перемикач(True))
print(тернарний_перевірка(True, "Так", "Ні"))
print(перевірка(True, False, True))
print(ланцюжок_умов(1, 2, 3))
print(фільтрація_true([True, False, True, False]))
print(мультиплексор(False, False, True, 10))
